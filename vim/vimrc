" My vim configuration file

" When started as "evim", evim.vim will aready have done these settings.
if v:progname =~? "evim"
    finish
endif

" Automatic reloading of .vimrc
if has('autocommand')
    autocmd! BufWritePost .vimrc source %
endif

" =====================================
" GENERAL CONFIGURATION
" =====================================

" Use Vim settings, rather than Vi settings (much better!)
" This must be first, because it changes other options as a side effect.
set nocompatible

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Better copy & paste
set pastetoggle=<F2>    "Toggle paste mode
set clipboard=unnamed

" In many terminal emulators the mouse works just fine, thus enable it
if has('mouse')
    set mouse=a
endif

"Hide mouse pointer while typing
set mousehide
set mousemodel=popup

" Basic configuration
set history=50        " keep 50 lines of command line history
set undolevels=70     " keep 70 actions for undo
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set hid               " change buffer - without saving
set incsearch         " do incremental search
set ignorecase        " ignore case in search
set smartcase         " disable ignorecase when pattern contains upper letters
set number            " show number of lines

set colorcolumn=80    " show a line at character 80

set laststatus=2      " show statusline
set wildmenu          " command-line completion
set wildignore=*.dll,*.o,*.pyc,*.pyo,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class

" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab         " insert spaces instead of tab character
set smarttab          " backspacing over indent

set autoindent        " copy indent from current line wen starting a new line
set smartindent       " smart autoindenting

" Setting pum complete options
set completeopt-=preview
set completeopt+=menuone
set completeopt+=longest

" Move backup files to ~/.vim_sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" Turn off annoying swapfiles
set noswapfile

" Set persistent undo (v7.3 only)
set undodir=~/.vim/undodir
set undofile

" force to use h, j, k, l keys (disable when you are trained)
"noremap <up>    <nop>
"noremap <down>  <nop>
"noremap <right> <nop>
"noremap <left>  <nop>
"vnoremap <up>    <nop>
"vnoremap <down>  <nop>
"vnoremap <right> <nop>
"vnoremap <left>  <nop>
"inoremap <up>    <nop>
"inoremap <down>  <nop>
"inoremap <right> <nop>
"inoremap <left>  <nop>

" Disable the blinking cursor.
set gcr=a:blinkon0

" =====================================
" GUI CONFIG (avoid .gvimrc)
" =====================================
if has('gui_running')
    colorscheme native
    set guifont=DejaVu\ Sans\ Mono\ 10

    set cursorline
    set guioptions-=T
    set guioptions-=e
    set guioptions-=r
    set scrolloff=3
else
    if exists('$TERM') && $TERM != 'linux'
        set t_Co=256
        colorscheme native256
    endif
endif

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has('gui_running')
    syntax on
    set hlsearch
endif

" set color to mark 80 characters
highlight ColorColumn ctermbg=233 guibg=#111111

" set color for matching parents
highlight MatchParen ctermbg=NONE cterm=bold gui=bold guibg=NONE guifg=Red

" =====================================
" CUSTOM FUNCTIONS
" =====================================

" indent all the buffer with one command (in normal mode)
fun! WholeIndent()
    let old = line('.')
    normal(gg=G)
    execute ':' . old
endfun

fun! s:SetFileTypePython()
    setl nosmartindent " based on http://stackoverflow.com/questions/2063175/vim-insert-mode-comments-go-to-start-of-line
    iab magic #!/use/bin/env python<cr># -*- coding: utf-8-*-<cr><cr><c-o>:call getchar()<cr>
    iab enc # -*- coding: utf-8 -*-<cr><cr><c-o>:call getchar()<cr>
    setlocal iskeyword+=.
endfun

fun! s:SetFileTypeC()
endfun

fun! s:SetFileTypeHTML()
    iab jinja {# vim: ft=htmljinja:sw=2<cr>#}<esc>:filetype detect<cr>kO<esc>O
endfun

"fun! s:SetFileTypeJinja()
"    runtime ftplugin/xml.vim " load xml plugin
"endfun

" =====================================
" LOAD PLUGINS
" =====================================

source ~/.vim/plugins.vim

" =====================================
" PLUGINS CONFIG
" =====================================
source ~/.vim/plugins_config.vim

" vundle: use `git` instead of `https` to fetch repos
let g:vundle_default_git_proto = 'git'

" =====================================
" KEY BINDINGS
" =====================================

" Rebind <Leader> key
let mapleader = ','

" Copy/Paste to and from Desktop Environment
noremap <leader>yy "+y
noremap <leader>pp "+gP

" CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo,
" so that you can undu CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Don't use Ex mode, use Q for formatting
vmap Q gq

" windows navitation
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" buffer navigations
map <silent><A-l> :bn<CR>
map <silent><A-h> :bp<CR>

" easier moving of code blocks
" Try to go visual mode (v), then select several lines of code here and then
" press ``>`` several times.
vnoremap < <gv
vnoremap > >gv

" easier increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

" alternative to <ESC>
inoremap <C-CR> <Esc>
" inoremap <C-i> <Esc>

" remove hightlight to your last search
noremap <C-n> :nohl<CR>

"
nmap -- :call WholeIndent()<CR>

" =====================================
" CUSTOM
" =====================================

if has('autocmd')   " only do this when compiled with autocommands.
    augroup MyAutoCommands

        " Clear the auto command group se we don't define ti multiple times
        autocmd!

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        " Also don't do it when the mark is in the first line, that is the default
        " position when opening a file.
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

        " Fix trailing whitepace in my most used programming languages
        autocmd BufWritePre *.py,*.coffee,*.rb,*.erb,*.md,*.scss,*.vim,*.js,*.html
                    \ silent! :StripTrailingWhiteSpace

        " Help mode bindings
        " ~~~~~~~~~~~~~~~~~~
        " <enter> to follow tag, <bs> to go back, and q to quit.
        autocmd FileType help nnoremap <buffer><cr> <c-]>
        autocmd FileType help nnoremap <buffer><bs> <c-T>
        autocmd FileType help nnoremap <buffer>q :q<CR>

        " selective settings based on filetype
        " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        " For all text files set 'textwidth' to 79 characters.
        autocmd FileType text,rst setlocal textwidth=79 | setlocal nonumber
        autocmd FileType make setlocal noexpandtab
        autocmd FileType python call s:SetFileTypePython()
        autocmd FileType {c,cpp} call s:SetFileTypeC() | setlocal ts=2 sw=2 sts=2
        autocmd FileType {html} call s:SetFileTypeHTML() | setlocal ts=2 sw=2 sts=2
        "autocmd FileType jinja call s:SetFileTypeJinja() | setlocal ts=2 sw=2 sts=2
        autocmd FileType javascript setlocal ts=2 sw=2 sts=2

        " Fix accidental indentation in html files
        autocmd FileType html setlocal indentkeys-=*<Return>

        " Resize splits when the window is resized
        autocmd VimResized * :wincmd =

    augroup END

endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already
if !exists(':DiffOrig')
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif
